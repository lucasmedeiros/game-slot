{"ast":null,"code":"var _jsxFileName = \"/home/lucas/Git/game-slot/src/pages/GamePage/index.tsx\";\nimport React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router';\nimport { ClipLoader } from 'react-spinners';\nimport { GamePageHeader } from '../../styles';\nimport { getRandomItemFromArray, preLoadImage } from '../../utils';\nimport GamePageDetails from './GamePageDetails';\nimport GamePageNotFound from './GamePageNotFound';\nimport GamePageTrailer from './GamePageTrailer';\nimport useModal from '../../hooks/useModal';\nimport useGameDetails from '../../hooks/useGameDetails';\nimport useGameReviews from '../../hooks/useGameReviews';\nimport Reviews from './Reviews';\nimport AddToListModal from './AddToListModal';\n\nconst GamePage = () => {\n  const {\n    open,\n    hide,\n    show\n  } = useModal();\n  const {\n    id\n  } = useParams();\n  const {\n    details,\n    loading: loadingDetails,\n    error\n  } = useGameDetails(id);\n  const {\n    result: reviewsResult,\n    loading: loadingReviews,\n    update: updateReviews\n  } = useGameReviews(id);\n  const [image, setImage] = useState();\n  useEffect(() => {\n    async function chooseScreenshotToDisplay() {\n      if (details === null || details === void 0 ? void 0 : details.screenshots) {\n        const imageURL = getRandomItemFromArray(details.screenshots);\n        const imageBase64 = await preLoadImage(imageURL);\n        setImage(imageBase64 !== null && imageBase64 !== void 0 ? imageBase64 : '');\n      }\n    }\n\n    chooseScreenshotToDisplay();\n  }, [details]);\n  return /*#__PURE__*/React.createElement(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(GamePageHeader, {\n    backgroundImage: image,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }\n  }, loadingDetails ? /*#__PURE__*/React.createElement(ClipLoader, {\n    size: 50,\n    color: \"white\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 11\n    }\n  }) : !error ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(GamePageTrailer, {\n    details: details,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(GamePageDetails, {\n    details: details,\n    count: reviewsResult === null || reviewsResult === void 0 ? void 0 : reviewsResult.count,\n    openModal: show,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }\n  })) : /*#__PURE__*/React.createElement(GamePageNotFound, {\n    error: error,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 11\n    }\n  })), !error && /*#__PURE__*/React.createElement(Reviews, {\n    gameId: id,\n    loading: loadingReviews,\n    reviewsResult: reviewsResult,\n    update: updateReviews,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(AddToListModal, {\n    game: details === null || details === void 0 ? void 0 : details.game,\n    isOpen: open,\n    onClose: hide,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default GamePage;","map":{"version":3,"sources":["/home/lucas/Git/game-slot/src/pages/GamePage/index.tsx"],"names":["React","useState","useEffect","useParams","ClipLoader","GamePageHeader","getRandomItemFromArray","preLoadImage","GamePageDetails","GamePageNotFound","GamePageTrailer","useModal","useGameDetails","useGameReviews","Reviews","AddToListModal","GamePage","open","hide","show","id","details","loading","loadingDetails","error","result","reviewsResult","loadingReviews","update","updateReviews","image","setImage","chooseScreenshotToDisplay","screenshots","imageURL","imageBase64","count","game"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { useParams } from 'react-router'\nimport { ClipLoader } from 'react-spinners'\nimport { GamePageHeader } from '../../styles'\nimport { getRandomItemFromArray, preLoadImage } from '../../utils'\nimport GamePageDetails from './GamePageDetails'\nimport GamePageNotFound from './GamePageNotFound'\nimport GamePageTrailer from './GamePageTrailer'\nimport useModal from '../../hooks/useModal'\nimport useGameDetails from '../../hooks/useGameDetails'\nimport useGameReviews from '../../hooks/useGameReviews'\nimport Reviews from './Reviews'\nimport AddToListModal from './AddToListModal'\n\ninterface GamePageParams {\n  id: string\n}\n\nconst GamePage: React.FC = () => {\n  const { open, hide, show } = useModal()\n  const { id } = useParams<GamePageParams>()\n  const { details, loading: loadingDetails, error } = useGameDetails(id)\n  const {\n    result: reviewsResult,\n    loading: loadingReviews,\n    update: updateReviews,\n  } = useGameReviews(id)\n  const [image, setImage] = useState<string>()\n\n  useEffect(() => {\n    async function chooseScreenshotToDisplay() {\n      if (details?.screenshots) {\n        const imageURL = getRandomItemFromArray(details.screenshots)\n        const imageBase64 = await preLoadImage(imageURL)\n        setImage(imageBase64 ?? '')\n      }\n    }\n    chooseScreenshotToDisplay()\n  }, [details])\n\n  return (\n    <section>\n      <GamePageHeader backgroundImage={image}>\n        {loadingDetails ? (\n          <ClipLoader size={50} color=\"white\" />\n        ) : !error ? (\n          <>\n            <GamePageTrailer details={details} />\n            <GamePageDetails\n              details={details}\n              count={reviewsResult?.count}\n              openModal={show}\n            />\n          </>\n        ) : (\n          <GamePageNotFound error={error} />\n        )}\n      </GamePageHeader>\n      {!error && (\n        <Reviews\n          gameId={id}\n          loading={loadingReviews}\n          reviewsResult={reviewsResult}\n          update={updateReviews}\n        />\n      )}\n      <AddToListModal game={details?.game} isOpen={open} onClose={hide} />\n    </section>\n  )\n}\n\nexport default GamePage\n"]},"metadata":{},"sourceType":"module"}