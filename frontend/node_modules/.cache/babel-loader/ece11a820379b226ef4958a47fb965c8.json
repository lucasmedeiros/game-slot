{"ast":null,"code":"import { useCallback, useEffect, useState, useRef } from 'react';\nimport { debounce } from 'lodash';\nexport function useDebouncedCallback(callback, delay = 0, options) {\n  return useCallback(debounce(callback, delay, options), [callback, delay, options]);\n}\nexport function useDebounce(value, delay = 0, options) {\n  const previousValue = useRef(value);\n  const [current, setCurrent] = useState(value);\n  const debouncedCallback = useDebouncedCallback(value => setCurrent(value), delay, options);\n  useEffect(() => {\n    if (value !== previousValue.current) {\n      debouncedCallback(value);\n      previousValue.current = value;\n      return debouncedCallback.cancel;\n    }\n  }, [debouncedCallback, value]);\n  return current;\n}","map":{"version":3,"sources":["/home/lucas/Git/game-slot/src/hooks/useDebounce.ts"],"names":["useCallback","useEffect","useState","useRef","debounce","useDebouncedCallback","callback","delay","options","useDebounce","value","previousValue","current","setCurrent","debouncedCallback","cancel"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,SAAtB,EAAiCC,QAAjC,EAA2CC,MAA3C,QAAyD,OAAzD;AACA,SAASC,QAAT,QAAyB,QAAzB;AAGA,OAAO,SAASC,oBAAT,CACLC,QADK,EAELC,KAAa,GAAG,CAFX,EAGLC,OAHK,EAIW;AAChB,SAAOR,WAAW,CAACI,QAAQ,CAACE,QAAD,EAAWC,KAAX,EAAkBC,OAAlB,CAAT,EAAqC,CACrDF,QADqD,EAErDC,KAFqD,EAGrDC,OAHqD,CAArC,CAAlB;AAKD;AAED,OAAO,SAASC,WAAT,CACLC,KADK,EAELH,KAAa,GAAG,CAFX,EAGLC,OAHK,EAIF;AACH,QAAMG,aAAa,GAAGR,MAAM,CAACO,KAAD,CAA5B;AACA,QAAM,CAACE,OAAD,EAAUC,UAAV,IAAwBX,QAAQ,CAACQ,KAAD,CAAtC;AACA,QAAMI,iBAAiB,GAAGT,oBAAoB,CAC3CK,KAAD,IAAcG,UAAU,CAACH,KAAD,CADoB,EAE5CH,KAF4C,EAG5CC,OAH4C,CAA9C;AAKAP,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIS,KAAK,KAAKC,aAAa,CAACC,OAA5B,EAAqC;AACnCE,MAAAA,iBAAiB,CAACJ,KAAD,CAAjB;AACAC,MAAAA,aAAa,CAACC,OAAd,GAAwBF,KAAxB;AACA,aAAOI,iBAAiB,CAACC,MAAzB;AACD;AACF,GANQ,EAMN,CAACD,iBAAD,EAAoBJ,KAApB,CANM,CAAT;AAQA,SAAOE,OAAP;AACD","sourcesContent":["import { useCallback, useEffect, useState, useRef } from 'react'\nimport { debounce } from 'lodash'\nimport { Cancelable, DebounceSettings } from 'lodash'\n\nexport function useDebouncedCallback<T extends (...args: any[]) => any>(\n  callback: T,\n  delay: number = 0,\n  options?: DebounceSettings\n): T & Cancelable {\n  return useCallback(debounce(callback, delay, options), [\n    callback,\n    delay,\n    options,\n  ])\n}\n\nexport function useDebounce<T>(\n  value: T,\n  delay: number = 0,\n  options?: DebounceSettings\n): T {\n  const previousValue = useRef(value)\n  const [current, setCurrent] = useState(value)\n  const debouncedCallback = useDebouncedCallback(\n    (value: T) => setCurrent(value),\n    delay,\n    options\n  )\n  useEffect(() => {\n    if (value !== previousValue.current) {\n      debouncedCallback(value)\n      previousValue.current = value\n      return debouncedCallback.cancel\n    }\n  }, [debouncedCallback, value])\n\n  return current\n}\n"]},"metadata":{},"sourceType":"module"}